# Generated by the grpc Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from ..grpc import grpc_comm_manager_pb2 as grpc__comm__manager__pb2


class gRPCCommManagerStub(object):
    """
    gRPC Communication Manager Stub.

    This class provides a client-side stub for interacting with the gRPC communication manager service.
    """

    def __init__(self, channel):
        """
        Initialize the gRPCCommManagerStub.

        Args:
            channel: A grpc.Channel.
        """
        self.sendMessage = channel.unary_unary(
            "/gRPCCommManager/sendMessage",
            request_serializer=grpc__comm__manager__pb2.CommRequest.SerializeToString,
            response_deserializer=grpc__comm__manager__pb2.CommResponse.FromString,
        )
        self.handleReceiveMessage = channel.unary_unary(
            "/gRPCCommManager/handleReceiveMessage",
            request_serializer=grpc__comm__manager__pb2.CommRequest.SerializeToString,
            response_deserializer=grpc__comm__manager__pb2.CommResponse.FromString,
        )


class gRPCCommManagerServicer(object):
    """
    gRPC Communication Manager Servicer.

    This class defines the gRPC service methods for the communication manager.
    """

    def sendMessage(self, request, context):
        """
        Handle the sendMessage gRPC service method.

        Args:
            request: The request message.
            context: The gRPC context.

        Raises:
            NotImplementedError: This method is not implemented.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def handleReceiveMessage(self, request, context):
        """
        Handle the handleReceiveMessage gRPC service method.

        Args:
            request: The request message.
            context: The gRPC context.

        Raises:
            NotImplementedError: This method is not implemented.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_gRPCCommManagerServicer_to_server(servicer, server):
    """
    Add a gRPC Communication Manager Servicer to a gRPC server.

    This function registers the gRPC service methods provided by the servicer to the gRPC server.

    Args:
        servicer: The gRPC Communication Manager Servicer instance.
        server: The gRPC server instance to which the servicer will be added.
    """
    rpc_method_handlers = {
        "sendMessage": grpc.unary_unary_rpc_method_handler(
            servicer.sendMessage,
            request_deserializer=grpc__comm__manager__pb2.CommRequest.FromString,
            response_serializer=grpc__comm__manager__pb2.CommResponse.SerializeToString,
        ),
        "handleReceiveMessage": grpc.unary_unary_rpc_method_handler(
            servicer.handleReceiveMessage,
            request_deserializer=grpc__comm__manager__pb2.CommRequest.FromString,
            response_serializer=grpc__comm__manager__pb2.CommResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "gRPCCommManager", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class gRPCCommManager(object):
    """
    gRPC Communication Manager.

    This class provides static methods for making gRPC calls to the Communication Manager service.

    Note: This class is part of an experimental API.
    """

    @staticmethod
    def sendMessage(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        """
        Send a gRPC sendMessage request.

        Args:
            request: The request message.
            target: The target server to send the request.
            options: Additional gRPC options.
            channel_credentials: Channel credentials.
            call_credentials: Call credentials.
            insecure: Whether to use an insecure channel.
            compression: Compression method to use.
            wait_for_ready: Wait for the server to become ready.
            timeout: Request timeout.
            metadata: Request metadata.

        Returns:
            grpc.Call: A gRPC call instance.
        """
        return grpc.experimental.unary_unary(
            request,
            target,
            "/gRPCCommManager/sendMessage",
            grpc__comm__manager__pb2.CommRequest.SerializeToString,
            grpc__comm__manager__pb2.CommResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def handleReceiveMessage(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        """
        Send a gRPC handleReceiveMessage request.

        Args:
            request: The request message.
            target: The target server to send the request.
            options: Additional gRPC options.
            channel_credentials: Channel credentials.
            call_credentials: Call credentials.
            insecure: Whether to use an insecure channel.
            compression: Compression method to use.
            wait_for_ready: Wait for the server to become ready.
            timeout: Request timeout.
            metadata: Request metadata.

        Returns:
            grpc.Call: A gRPC call instance.
        """
        return grpc.experimental.unary_unary(
            request,
            target,
            "/gRPCCommManager/handleReceiveMessage",
            grpc__comm__manager__pb2.CommRequest.SerializeToString,
            grpc__comm__manager__pb2.CommResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
