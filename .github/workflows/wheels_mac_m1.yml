name: Wheels for MacOS (M1)
# https://github.com/pypa/cibuildwheel
on:
  schedule:
    # Nightly build at 12:12 A.M.
    - cron: "12 12 */1 * *"
  push:
    branches:
      - dev/v0.7.0
      - "[0-9]+.[0-9]+.X"
  pull_request:
    branches:
      - dev/v0.7.0
      - "[0-9]+.[0-9]+.X"
  workflow_dispatch:

jobs:
  build_wheels:
    name: Build wheels on Windows (x86)
    runs-on: [self-hosted, macOS, ARM64]

    strategy:
      # Ensure that a wheel builder finishes even if another fails
      fail-fast: false
      matrix:
        include:
          # MacOS arm64
          - os: macos-latest-py38-arm64
            bitness: 64
            python: 38
            platform_id: macosx_arm64
          - os: macos-latest-py39-arm64
            bitness: 64
            python: 39
            platform_id: macosx_arm64
          - os: macos-latest-py310-arm64
            bitness: 64
            python: 310
            platform_id: macosx_arm64

    steps:
      - uses: actions/checkout@v2

      # Used to host cibuildwheel
      - uses: actions/setup-python@v2

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel

      - name: Build wheels
        working-directory: ./python
#        env:
#          CIBW_BUILD: cp${{ matrix.python }}-${{ matrix.platform_id }}
#          CIBW_ARCHS: all
#          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: bash {project}/python/build_tools/github/repair_windows_wheels.sh {wheel} {dest_dir} ${{ matrix.bitness }}
#          CIBW_BEFORE_TEST_WINDOWS: bash {project}/python/build_tools/github/build_minimal_windows_image.sh ${{ matrix.python }} ${{ matrix.bitness }}
#          CIBW_TEST_COMMAND: bash {project}/python/build_tools/github/test_wheels.sh
#          CIBW_TEST_COMMAND_WINDOWS: bash {project}/python/build_tools/github/test_windows_wheels.sh ${{ matrix.python }} ${{ matrix.bitness }}
#          CIBW_BUILD_VERBOSITY: 1
        run: python -m cibuildwheel --output-dir wheelhouse
#        run: cd {project}/python && python -m cibuildwheel --output-dir wheelhouse
        # to supply options, put them in 'env', like (test)
        # env:
        #   CIBW_SOME_OPTION: value
      - name: Store artifacts
        uses: actions/upload-artifact@v2
        with:
          path: ./python/wheelhouse/*.whl

# Build the source distribution under Linux
  build_sdist:
    name: Source distribution
    runs-on: [self-hosted, Linux]
    defaults:
      run:
        shell: bash
        working-directory: python
    steps:
      - name: Checkout FedML
        uses: actions/checkout@v1
#
#      - name: Setup Python
#        uses: actions/setup-python@v2
#        with:
#          python-version: '3.9'  # update once build dependencies are available

      - name: Build source distribution
        run: bash build_tools/github/build_source.sh

      - name: Test source distribution
        run: bash build_tools/github/test_source.sh
        env:
          OMP_NUM_THREADS: 2
          OPENBLAS_NUM_THREADS: 2

      - name: Store artifacts
        uses: actions/upload-artifact@v2
        with:
          path: python/dist/*.tar.gz

  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: [self-hosted, Linux]
    # upload to PyPI on every tag starting with 'v'
#    if: github.event_name == 'push' && contains(github.event.comment, 'release v')
    # alternatively, to publish when a GitHub Release is created, use the following rule:
    # if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@v1.4.2
        with:
          skip_existing: true
          user: chaoyanghe
          password: ${{ secrets.pypi_password }}
          # To test: repository_url: https://test.pypi.org/legacy/

# three errors:
        # 1) from mpi4py import MPI
        #  ImportError: DLL load failed while importing MPI: The specified module could not be found.

        # 2) ERROR: No matching distribution found for MNN==1.1.6

        # 3) ERROR: Could not find a version that satisfies the requirement torch==1.11.0 (from fedml) (from versions: none)
        #  ERROR: No matching distribution found for torch==1.11.0

        # 4) INFO:auditwheel.main_repair:This does not look like a platform wheel

        # 5)  _configtest.c:2:10: fatal error: 'mpi.h' file not found