name: (dev) Build Cross-platform Wheels
# https://github.com/pypa/cibuildwheel
on:
  schedule:
    # Nightly build at 12:12 A.M.
    - cron: "12 12 */1 * *"
  push:
    branches:
      - dev/v0.7.0
      - "[0-9]+.[0-9]+.X"
  pull_request:
    branches:
      - dev/v0.7.0
      - "[0-9]+.[0-9]+.X"
  workflow_dispatch:

jobs:
  build_wheels_macos_intel:
    name: Build wheels on MacOS (Intel, x86)
    runs-on: [self-hosted, macOS, X64, intel]
    defaults:
      run:
        shell: bash
        working-directory: python

    strategy:
      # Ensure that a wheel builder finishes even if another fails
      fail-fast: false
      matrix:
        include:
          # _configtest.c:2:10: fatal error: 'mpi.h' file not found
          - os: macos-latest-py38-x86
            bitness: 64
            python: 38
            platform_id: macosx_x86_64
          # _configtest.c:2:10: fatal error: 'mpi.h' file not found
          - os: macos-latest-py39-x86
            bitness: 64
            python: 39
            platform_id: macosx_x86_64
          # _configtest.c:2:10: fatal error: 'mpi.h' file not found
          - os: macos-latest-py310-x86
            bitness: 64
            python: 310
            platform_id: macosx_x86_64

    steps:
      - uses: actions/checkout@v2

      # Used to host cibuildwheel
      - uses: actions/setup-python@v2

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.5.0

      - name: Build wheels
        env:
          CIBW_BUILD: cp${{ matrix.python }}-${{ matrix.platform_id }}
          CIBW_ARCHS: all
          CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.manylinux_image }}
          CIBW_MANYLINUX_I686_IMAGE: ${{ matrix.manylinux_image }}
          CIBW_TEST_SKIP: "*-macosx_arm64"
#          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: bash build_tools/github/repair_windows_wheels.sh {wheel} {dest_dir} ${{ matrix.bitness }}
#          CIBW_BEFORE_TEST_WINDOWS: bash build_tools/github/build_minimal_windows_image.sh ${{ matrix.python }} ${{ matrix.bitness }}
          CIBW_TEST_COMMAND: bash {project}/build_tools/github/test_wheels.sh
          CIBW_BUILD_VERBOSITY: 1
        run: bash build_tools/github/build_wheels.sh
        # to supply options, put them in 'env', like:
        # env:
        #   CIBW_SOME_OPTION: value
      - name: Store artifacts
        uses: actions/upload-artifact@v2
        with:
          path: wheelhouse/*.whl

  build_wheels_macos_ARM:
    name: Build-wheels-on-MacOS-m1
    runs-on: [self-hosted, macOS, ARM64]
    defaults:
      run:
        shell: bash
        working-directory: python

    strategy:
      # Ensure that a wheel builder finishes even if another fails (3)
      fail-fast: false
      matrix:
        include:
          # MacOS arm64
          - os: macos-latest-py38-arm64
            bitness: 64
            python: 38
            platform_id: macosx_arm64
          - os: macos-latest-py39-arm64
            bitness: 64
            python: 39
            platform_id: macosx_arm64
          - os: macos-latest-py310-arm64
            bitness: 64
            python: 310
            platform_id: macosx_arm64

    steps:
      - uses: actions/checkout@v2

      # Used to host cibuildwheel
      - uses: actions/setup-python@v2

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.5.0

      - name: Build wheels
        env:
          CIBW_BUILD: cp${{ matrix.python }}-${{ matrix.platform_id }}
          CIBW_ARCHS: all
          CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.manylinux_image }}
          CIBW_MANYLINUX_I686_IMAGE: ${{ matrix.manylinux_image }}
          CIBW_TEST_SKIP: "*-macosx_arm64"
#          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: bash build_tools/github/repair_windows_wheels.sh {wheel} {dest_dir} ${{ matrix.bitness }}
#          CIBW_BEFORE_TEST_WINDOWS: bash build_tools/github/build_minimal_windows_image.sh ${{ matrix.python }} ${{ matrix.bitness }}
          CIBW_TEST_COMMAND: bash {project}/build_tools/github/test_wheels.sh
          CIBW_BUILD_VERBOSITY: 1
        run: bash build_tools/github/build_wheels.sh
        # to supply options, put them in 'env', like:
        # env:
        #   CIBW_SOME_OPTION: value
      - name: Store artifacts
        uses: actions/upload-artifact@v2
        with:
          path: wheelhouse/*.whl

  build_wheels_windows11:
    name: Build wheels on Windows (x86)
    runs-on: [self-hosted, X64, Windows]

    strategy:
      # Ensure that a wheel builder finishes even if another fails
      fail-fast: false
      matrix:
        include:
          # from mpi4py import MPI
          #  ImportError: DLL load failed while importing MPI: The specified module could not be found.
          - os: windows-2019-py38-amd64
            python: 38
            bitness: 64
            platform_id: win_amd64
          # from mpi4py import MPI
          #  ImportError: DLL load failed while importing MPI: The specified module could not be found.
          - os: windows-latest-py39-amd64
            python: 39
            bitness: 64
            platform_id: win_amd64
          # ERROR: No matching distribution found for MNN==1.1.6
          - os: windows-latest-py310-amd64
            python: 310
            bitness: 64
            platform_id: win_amd64
          # #RROR: No matching distribution found for torch==1.11.0
          - os: windows-latest-py38-win32
            python: 38
            bitness: 32
            platform_id: win32
          # ERROR: No matching distribution found for torch==1.11.0
          - os: windows-latest-py39-win32
            python: 39
            bitness: 32
            platform_id: win32

    steps:
      - uses: actions/checkout@v2

      # Used to host cibuildwheel
      - uses: actions/setup-python@v2

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel

      - name: Build wheels
        env:
          CIBW_BUILD: cp${{ matrix.python }}-${{ matrix.platform_id }}
          CIBW_ARCHS: all
          CIBW_MANYLINUX_X86_64_IMAGE: ${{ matrix.manylinux_image }}
          CIBW_MANYLINUX_I686_IMAGE: ${{ matrix.manylinux_image }}
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: bash {project}/python/build_tools/github/repair_windows_wheels.sh {wheel} {dest_dir} ${{ matrix.bitness }}
          CIBW_BEFORE_TEST_WINDOWS: bash {project}/python/build_tools/github/build_minimal_windows_image.sh ${{ matrix.python }} ${{ matrix.bitness }}
          CIBW_TEST_COMMAND: bash {project}/python/build_tools/github/test_wheels.sh
          CIBW_TEST_COMMAND_WINDOWS: bash {project}/python/build_tools/github/test_windows_wheels.sh ${{ matrix.python }} ${{ matrix.bitness }}
          CIBW_BUILD_VERBOSITY: 1
        run: bash {project}/python/build_tools/github/build_wheels.sh
#        run: cd {project}/python && python -m cibuildwheel --output-dir wheelhouse
        # to supply options, put them in 'env', like (test)
        # env:
        #   CIBW_SOME_OPTION: value
      - name: Store artifacts
        uses: actions/upload-artifact@v2
        with:
          path: wheelhouse/*.whl


#
## Build the source distribution under Linux
#  build_sdist:
#    name: Source distribution
#    runs-on: self-hosted
#    defaults:
#      run:
#        shell: bash
#        working-directory: python
#    steps:
#      - name: Checkout FedML
#        uses: actions/checkout@v1
#
#      - name: Setup Python
#        uses: actions/setup-python@v2
#        with:
#          python-version: '3.9'  # update once build dependencies are available
#
#      - name: Build source distribution
#        run: bash build_tools/github/build_source.sh
#
#      - name: Test source distribution
#        run: bash build_tools/github/test_source.sh
#        env:
#          OMP_NUM_THREADS: 2
#          OPENBLAS_NUM_THREADS: 2
#
#      - name: Store artifacts
#        uses: actions/upload-artifact@v2
#        with:
#          path: dist/*.tar.gz
#
#  # Upload the wheels and the source distribution
#  upload_anaconda:
#    name: Upload to Anaconda
#    needs: [build_wheels, build_sdist]
#    runs-on: self-hosted
#    defaults:
#      run:
#        shell: bash
#        working-directory: python
#    steps:
#      - name: Checkout FedML
#        uses: actions/checkout@v1
#
#      - name: Download artifacts
#        uses: actions/download-artifact@v2
#        with:
#          path: dist
#
#      - name: Setup Python
#        uses: actions/setup-python@v2
#
#      - name: Upload artifacts
#        env:
#          # Secret variables need to be mapped to environment variables explicitly
#          SCIKIT_LEARN_NIGHTLY_UPLOAD_TOKEN: ${{ secrets.FEDML_NIGHTLY_UPLOAD_TOKEN }}
#          SCIKIT_LEARN_STAGING_UPLOAD_TOKEN: ${{ secrets.FEDML_STAGING_UPLOAD_TOKEN }}
#        # Force a replacement if the remote file already exists
#        run: bash build_tools/github/upload_anaconda.sh


# three errors:
        # 1) from mpi4py import MPI
        #  ImportError: DLL load failed while importing MPI: The specified module could not be found.

        # 2) ERROR: No matching distribution found for MNN==1.1.6

        # 3) ERROR: Could not find a version that satisfies the requirement torch==1.11.0 (from fedml) (from versions: none)
        #  ERROR: No matching distribution found for torch==1.11.0

        # 4) INFO:auditwheel.main_repair:This does not look like a platform wheel

        # 5)  _configtest.c:2:10: fatal error: 'mpi.h' file not found