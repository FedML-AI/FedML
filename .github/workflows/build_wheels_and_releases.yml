name: Build_Wheels_and_Release
# https://github.com/pypa/cibuildwheel
# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  schedule:
    # Nightly build at 12:12 A.M.
    - cron: "12 12 */1 * *"
  push:
    branches: [ master, dev/v0.7.0 ]
  pull_request:
    branches: [ master, dev/v0.7.0 ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build_wheels:
    defaults:
      run:
        shell: bash
        working-directory: python
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
        arch: [X86, X64, ARM, ARM64]
        python-version: ['3.6', '3.7', '3.8', '3.9']
#        exclude:
#          - os: macos-latest
#            python-version: '3.8'
#          - os: windows-latest
#            python-version: '3.6'
    runs-on: [self-hosted]

    steps:
      - uses: actions/checkout@v2

      # Used to host cibuildwheel
      - uses: actions/setup-python@v2

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel

      - name: Build wheels
        working-directory: ./python
#        env:
#          CIBW_BUILD: cp${{ matrix.python }}-${{ matrix.platform_id }}
#          CIBW_ARCHS: all
#          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: bash {project}/python/build_tools/github/repair_windows_wheels.sh {wheel} {dest_dir} ${{ matrix.bitness }}
#          CIBW_BEFORE_TEST_WINDOWS: bash {project}/python/build_tools/github/build_minimal_windows_image.sh ${{ matrix.python }} ${{ matrix.bitness }}
#          CIBW_TEST_COMMAND: bash {project}/python/build_tools/github/test_wheels.sh
#          CIBW_TEST_COMMAND_WINDOWS: bash {project}/python/build_tools/github/test_windows_wheels.sh ${{ matrix.python }} ${{ matrix.bitness }}
#          CIBW_BUILD_VERBOSITY: 1
        run: python -m cibuildwheel --output-dir wheelhouse
#        run: cd {project}/python && python -m cibuildwheel --output-dir wheelhouse
        # to supply options, put them in 'env', like (test)
        # env:
        #   CIBW_SOME_OPTION: value

      - name: Upload source zip file
        uses: actions/upload-artifact@v2
        with:
          path: python/dist/*.tar.gz
      - name: Upload Wheels
        uses: actions/upload-artifact@v2
        with:
          path: ./python/dist/*.whl

  upload_pypi:
    needs: [build_wheels]
    runs-on: [self-hosted]
    # upload to PyPI on every tag starting with 'v'
#    if: github.event_name == 'push' && contains(github.event.comment, 'release v')
    # alternatively, to publish when a GitHub Release is created, use the following rule:
    # if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@v1.4.2
        with:
          skip_existing: true
          user: chaoyanghe
          password: ${{ secrets.pypi_password }}
          # To test: repository_url: https://test.pypi.org/legacy/