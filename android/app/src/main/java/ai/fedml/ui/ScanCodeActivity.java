package ai.fedml.ui;import android.Manifest;import android.content.Intent;import android.content.pm.PackageManager;import android.os.Bundle;import android.os.Handler;import android.os.Looper;import android.text.TextUtils;import android.view.View;import android.widget.Button;import android.widget.EditText;import android.widget.ImageView;import android.widget.LinearLayout;import androidx.annotation.Nullable;import androidx.core.app.ActivityCompat;import androidx.core.content.ContextCompat;import com.yzq.zxinglibrary.android.CaptureActivity;import com.yzq.zxinglibrary.common.Constant;import ai.fedml.R;import ai.fedml.base.AppManager;import ai.fedml.base.BaseActivity;import ai.fedml.edge.FedEdgeManager;import ai.fedml.edge.request.RequestManager;import ai.fedml.edge.request.parameter.BindingAccountReq;import ai.fedml.edge.utils.DeviceUtils;import ai.fedml.edge.utils.LogHelper;import ai.fedml.utils.ToastUtils;public class ScanCodeActivity extends BaseActivity implements View.OnClickListener {    private static final int REQUEST_CODE_SCAN = 0x0000;//Scan ID    private EditText edt_account_id;    private ImageView img_privacy;    private boolean isSelect = false;    private final Handler mHandler = new Handler(Looper.getMainLooper());    @Override    protected void onCreate(@Nullable Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_scan_code);        initView();        loadData();    }    private void initView() {        LinearLayout scanCodeLayout = findViewById(R.id.line_scan_code);        edt_account_id = findViewById(R.id.edt_account_id);        img_privacy = findViewById(R.id.img_privacy);        Button okButton = findViewById(R.id.btn_ok);        scanCodeLayout.setOnClickListener(this);        img_privacy.setOnClickListener(this);        okButton.setOnClickListener(this);    }    private void loadData() {        // meta-data binding        Runnable runnable = new Runnable() {            @Override            public void run() {                final String bindingId = FedEdgeManager.getFedEdgeApi().getBoundEdgeId();                if (TextUtils.isEmpty(bindingId)) {                    mHandler.postDelayed(this, 500);                } else {                    Intent intent = new Intent();                    intent.setClass(ScanCodeActivity.this, HomeActivity.class);                    startActivity(intent);                    AppManager.getAppManager().finishActivity();                }            }        };        mHandler.postDelayed(runnable, 500);    }    @Override    public void onClick(View view) {        switch (view.getId()) {            case R.id.line_scan_code:                //Dynamic permission application                if (ContextCompat.checkSelfPermission(ScanCodeActivity.this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) {                    ActivityCompat.requestPermissions(ScanCodeActivity.this, new String[]{Manifest.permission.CAMERA}, 1);                } else {                    goScan();                }                break;            case R.id.img_privacy:                if (isSelect) {                    img_privacy.setBackgroundResource(R.mipmap.ic_privacy_pressed);                    isSelect = false;                } else {                    img_privacy.setBackgroundResource(R.mipmap.ic_privacy_normal);                    isSelect = true;                }                break;            case R.id.btn_ok:                String id = FedEdgeManager.getFedEdgeApi().getBoundEdgeId();                if (TextUtils.isEmpty(id)) {                    postBinding();                } else {                    Intent intent = new Intent();                    intent.setClass(ScanCodeActivity.this, HomeActivity.class);                    startActivity(intent);                    AppManager.getAppManager().finishActivity();                }                break;        }    }    /**     * Jump to the scanning code interface to scan the code     */    private void goScan() {        Intent intent = new Intent(ScanCodeActivity.this, CaptureActivity.class);        startActivityForResult(intent, REQUEST_CODE_SCAN);    }    @Override    protected void onActivityResult(int requestCode, int resultCode, Intent data) {        super.onActivityResult(requestCode, resultCode, data);        // Scan the QR code/barcode and send it back        if (requestCode == REQUEST_CODE_SCAN && resultCode == RESULT_OK) {            if (data != null) {                String content = data.getStringExtra(Constant.CODED_CONTENT);                edt_account_id.setText(content);            }        }    }    public void postBinding() {        String accountId = edt_account_id.getText().toString().trim();        if (TextUtils.isEmpty(accountId)) {            ToastUtils.show(R.string.account_input_tip);            return;        }        BindingAccountReq req = BindingAccountReq.builder()                .accountId(accountId).deviceId(DeviceUtils.getDeviceId()).build();        RequestManager.bindingAccount(req, data -> runOnUiThread(() -> {            LogHelper.i("bindingData.getBindingId() = %s", data);            if (data == null) {                ToastUtils.show(R.string.retry_tip);                return;            }            FedEdgeManager.getFedEdgeApi().bindEdge(data.getBindingId());            Intent intent = new Intent();            intent.setClass(ScanCodeActivity.this, HomeActivity.class);            startActivity(intent);            AppManager.getAppManager().finishActivity();        }));    }}