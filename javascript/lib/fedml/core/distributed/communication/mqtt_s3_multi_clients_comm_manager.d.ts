import * as mqtt from "mqtt";
import { BaseCommunicationManager } from "./base_com_manager";
import { Message } from "./message";
import type { Observer } from "./observer";
import { S3Storage } from "./remote_storage";
export declare class MqttS3MultiClientsCommManager implements BaseCommunicationManager {
    config_path: any;
    s3_config_path: any;
    topic: any;
    client_rank: any;
    client_num: number;
    args: any;
    broker_port: any;
    broker_host: any;
    mqtt_pwd: any;
    mqtt_user: any;
    keepalive_time: number;
    client_id_list: any;
    _topic: string;
    s3_storage: S3Storage;
    server_id: number;
    client_real_ids: any;
    group_server_id_list: any;
    edge_id: any;
    observers: Array<Observer>;
    _client_id: string;
    client_active_list: Object;
    top_active_msg: string;
    topic_last_will_msg: string;
    last_will_msg: string;
    mqtt_mgr: mqtt.MqttClient;
    is_connected: boolean;
    options: Object;
    topic_in: string;
    _listeners: any;
    _connected_listeners: any[];
    _subscribed_listeners: any[];
    _published_listeners: any[];
    _passthrough_listeners: any;
    constructor(config_path: any, s3_config_path: any, topic_in: string | undefined, client_rank: number | undefined, client_num: number | undefined, args: any);
    callback_published_listener(client: any): void;
    callback_connected_listener(client: any): void;
    callback_subscribed_listener(client: any): void;
    _on_subscribe(client: any): void;
    on_connect(): void;
    on_disconnect(): void;
    get_client_id(): string;
    get_topic(): string;
    _notify_connection_ready(): void;
    _notify(msg_obj: any): void;
    set_config_from_objects(mqtt_config: any): void;
    send_message(msg: Message): Promise<any>;
    add_observer(observer: Observer): void;
    remove_observer(observer: Observer): void;
    handle_receive_message(): void;
    stop_receive_message(): void;
}
export default MqttS3MultiClientsCommManager;
