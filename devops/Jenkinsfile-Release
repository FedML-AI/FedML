pipeline {
  agent {
    node {
          label 'base'
    }
  }

  environment {
        GITHUB_CREDENTIAL_ID = 'github-id'
        AWS_IAM_CREDENTIAL_ID_PRODUCTION = 'aws-iam-id-release'
        AWS_ECR_CREDENTIAL_ID_PRODUCTION = 'aws-ecr-id-release'

        REGISTRY_PRODUCTION = 'public.ecr.aws'
        HTTPS_REGISTRY_PRODUCTION = 'https://public.ecr.aws'
        AWS_REGION_NAME_PRODUCTION = 'us-west-1'
        VERSION_PRODUCTION = 'release'
        BRANCH_PRODUCTION = 'main'

        DOCKER_NAMESPACE = 'x6k8q1x9/'
        APP_NAME = 'fedml-device-image'
        DEPLOY_NAME = 'fedml-device-image'
        GIT_URL = 'https://github.com/FedML-AI/FedML.git'
        SONAR_HOST = ''
        SONAR_CREDENTIAL_ID = 'sonar-token'
        TAG_NAME = "SNAPSHOT-$BUILD_NUMBER"
        FEDML_MAIL_SUCCESS_SUBJECT = 'FedMLDevOPS Succeeded Pipeline'
        FEDML_MAIL_FAILURE_SUBJECT = 'FedMLDevOPS Failed Pipeline'
        FEDML_MAIL_BODY1 = "Build Display Name: "
        FEDML_MAIL_BODY2 = ", Please check build details by the following URL: http://kube.fedml.ai/workspaces/fedml-devops-production/devops"
    }

  stages {
    stage('checkout for production') {
      when {
        branch env.BRANCH_PRODUCTION
      }
      agent none
      steps {
        git(branch: env.BRANCH_PRODUCTION, url: env.GIT_URL, credentialsId: env.GITHUB_CREDENTIAL_ID, changelog: true, poll: false)
      }
    }

    stage('mlops build for production') {
      when {
        branch env.BRANCH_PRODUCTION
      }
      steps {
        container('base') {
          withCredentials([usernamePassword(passwordVariable : 'FEDML_PIP_PASSWORD' ,usernameVariable : 'FEDML_PIP_USER' ,credentialsId : "$FEDML_PIP_CREDENTIALS_PRODUCTION" ,)]) {
            sh 'pip install twine'
            sh 'python setup.py sdist bdist_wheel'
            sh 'twine check dist/*'
            sh 'twine upload dist/* -u $FEDML_PIP_USER -p $FEDML_PIP_PASSWORD --no-interactive'
          }
        }
      }
    }

    stage('docker build for production') {
      when {
        branch env.BRANCH_PRODUCTION
      }
      steps {
        container('base') {
          sh 'docker build -f ./devops/Dockerfile-Release -t $REGISTRY_PRODUCTION/$DOCKER_NAMESPACE$APP_NAME:$VERSION_PRODUCTION-SNAPSHOT-$BUILD_NUMBER .'
        }
      }
    }

    stage('push latest for production') {
      when {
        branch env.BRANCH_PRODUCTION
      }
      steps {
        container('base') {
          withCredentials([usernamePassword(passwordVariable : 'AWS_IAM_ACCESS_ID' ,usernameVariable : 'AWS_ECR_USERNAME' ,credentialsId : "$AWS_ECR_CREDENTIAL_ID_PRODUCTION" ,)]) {
             withCredentials([usernamePassword(passwordVariable : 'AWS_IAM_ACCESS_KEY' ,usernameVariable : 'AWS_REGION' ,credentialsId : "$AWS_IAM_CREDENTIAL_ID_PRODUCTION" ,)]) {
                sh 'curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"'
                sh 'unzip awscliv2.zip'
                sh './aws/install'
                sh 'chmod a+x ./devops/scripts/set-aws-credentials.sh;./devops/scripts/set-aws-credentials.sh $AWS_IAM_ACCESS_ID $AWS_IAM_ACCESS_KEY $AWS_REGION'
                sh 'docker login $REGISTRY_PRODUCTION -u $AWS_ECR_USERNAME -p $(/usr/local/bin/aws ecr get-login-password --region $AWS_REGION)'
             }
          }

          sh 'docker tag  $REGISTRY_PRODUCTION/$DOCKER_NAMESPACE$APP_NAME:$VERSION_PRODUCTION-SNAPSHOT-$BUILD_NUMBER $REGISTRY_PRODUCTION/$DOCKER_NAMESPACE$APP_NAME:$VERSION_PRODUCTION'
          sh 'docker push  $REGISTRY_PRODUCTION/$DOCKER_NAMESPACE$APP_NAME:$VERSION_PRODUCTION'
        }
      }
    }

    stage('deploy for production') {
      when {
        branch env.BRANCH_PRODUCTION
      }
      steps {
         container('base') {
            sh 'echo "deploying..."'
         }
      }
    }

  }

  post {
    always {
      echo 'One way or another, I have finished'
    }
    success {
       echo 'I succeeded!'
       echo "branch name: " + env.BRANCH_NAME
       script {
            if (env.BRANCH_NAME == env.BRANCH_PRODUCTION) {
                def mail_list = ['alexliang.kh@gmail.com','changyanghe.com@gmail.com']
                mail_list.each { x ->
                    echo "mail item: ${x}"
                    mail (to: "${x}",
                          subject: env.FEDML_MAIL_SUCCESS_SUBJECT,
                          body: env.FEDML_MAIL_BODY1 + "${currentBuild.fullDisplayName}" + env.FEDML_MAIL_BODY2);
                }
            }
       }
    }
    unstable {
       echo 'I am unstable :/'
    }
    failure {
       echo 'I failed :('
       echo "branch name: " + env.BRANCH_NAME
       script {
            if (env.BRANCH_NAME == env.BRANCH_PRODUCTION) {
                def mail_list = ['alexliang.kh@gmail.com','changyanghe.com@gmail.com']
                mail_list.each { x ->
                    echo "mail item: ${x}"
                    mail (to: "${x}",
                          subject: env.FEDML_MAIL_FAILURE_SUBJECT,
                          body: env.FEDML_MAIL_BODY1 + "${currentBuild.fullDisplayName}" + env.FEDML_MAIL_BODY2);
                }
            }
       }
    }
    changed {
       echo 'Things were different before...'
    }
  }
}
